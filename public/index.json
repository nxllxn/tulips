





























































































































































































































[{"categories":["Tutorials","Algorithms"],"contents":"其实很早就想要写一篇动态规划相关的文章，把这个非常棒的算法或者说是一种问题思考方式推荐给更多的人，不论你是程序员还是其他任何职业的从业人员，了解动态规划都会对你或者说你看待一个问题的方式或多或少产生一些影响，因为它真的太强大了。\n那么为什么我会这么觉得呢?\n第一，动态规划几乎可以说是分治在现实世界里面最优雅的一种表达方式。当我们面对一个非常复杂的问题时，如果这个问题能够划分为子问题并逐个击破，那么此时不用想太多，动态规划大概率是解决这个问题的一个最好的工具了，不论是指导你对这个问题进行快速的分析还是最终作为实际的解决方案，动态规划绝对会让你的眼前一亮。\n第二，动态规划不会止步于问题分析以及给出一个递归的解决方案。的确，当我们使用动态规划时，当我们明确了我们的状态以及状态迁移方程，我们很容易得到一个基于递归的解决方案。这是动态规划的一大优点所在，即你不需要将一整个问题放到你的脑海中完完整整的想清楚，你只需要瞥见其中的规律，便可以快刀斩乱麻，轻松地解决一个非常复杂的问题；但是递归虽好，如果有时候使用不当，你的程序可能需要大量的资源，执行大量的计算，花费更多的时间才能得到最终的结果；好在动态规划并没有止步于仅仅给出一个递归的解决方案，除此之外，我们只要使用一些其他的方法或者依赖一些恰当的数据结构，就能够得到一个高效到令人拍案叫绝的解决方案。\n初次接触到动态规划时，我甚至都不知道自己接触了这个概念，其实就是大家可能经常接触到的一个数学问题，斐波那契数列。\n 斐波那契数列（Fibonacci sequence），又称黄金分割数列，因数学家莱昂纳多·斐波那契（Leonardo Fibonacci）以兔子繁殖为例子而引入，故又称为“兔子 数列”，指的是这样一个数列：1、1、2、3、5、8、13、21、34、……在数学上，斐波那契数列以如下被以递推的方法定义：F(0)=0，F(1)=1，F(n)=F(n - 1)+ F(n - 2)（n ≥ 2，n ∈ N*）\n 你可能会问道，这个斐波那契数列和动态规划又有什么关系呢，哈哈，的确，乍一看，可能这两者之间并没有太大联系，不过这并不奇怪，主要是因为我们已经跳过了动态规划的部分，转向了当我们使用动态规划给这个问题求解时所得到的最终的解决方案，所以我们已经看不到动态规划的影子了，也就无从探究它的魅力了。\n那么怎么办呢，我们可能从这个问题的源头开始说起，我这里不会举这个百度百科或者维基百科上出现的兔子问题，我所要想你展示的是另一个非常有趣的问题\u0026ndash;爬楼梯。\n 爬楼梯问题，假设有十级楼梯，你每次移动时，要么移动一级台阶，要么移动两级台阶，请问从楼梯的底部到顶部你一共有多少种可能的方式？\n 当我们拿到这个问题时，我们的大脑可能会不由自主的开始枚举所有可能的结果，比如每一步都只向上移动一级台阶是一种可能的走法，每一步都向上移动两级台阶是一种走法，前面四步每一步都移动两级台阶，然后第五步第六步分别移动以及台阶又是一种走法。如此循环往复尝试罗列所有的可能的结果，但是你很快就会发现，想要罗列出所有结果对你来说太难了，此外你也应该已经注意到了，现在还仅仅是十几台阶，如果是二十级三十级甚至更多，使用这种枚举的方式几乎是不可能行得通的。\n此时，动态规划的思想就很容易应用到这个问题上了。来，让我们转换一下思路，加入你现在只剩最后一次移动就到达第十级阶梯了，那么你可能的情况是什么呢，你会发现此时只会有两种结果，那就是你要么在第九级阶梯，此时你向上移动一级阶梯就可以到达终点了；要么你在第八级阶梯，此时你向上移动两级阶梯同样可以到达终点。那么换句话说，你想要到达终点，就必须先到达第八级阶梯或者第九级阶梯，也意味着，走到终点的可能的走法等价于走到第八级阶梯的走法加上走到第九级阶梯的走法。同理，想要到达第九级阶梯的走法又等价于走到第七级阶梯的走法加上走到第八级阶梯的走法。一次类推，我们可以得到一个方程式f(n) = f(n - 1) + f(n - 2)。此时我们暂时不考虑所谓边界条件。\nOK我们此时已经拿到了一个所谓的方程f(n) = f(n - 1) + f(n - 2)，此时你可能又会尝试调转你的脑细胞还是进行计算了。f(10) = f(9) + f(8)、f(9) = f(8) + f(7) =\u0026gt; f(10) = f(8) + f(7) + f(8)...。你尝试对最终的结果进行展开，但是你慢慢就会发现你的脑细胞不够用了。其实此处你在做的事情就是递归求解，只是这个求解过程可能交给计算机要更加合适，留着你的脑细胞日后想其他问题吧哈哈。不过此处你就会发现递归求解过程可能出现的问题\n 当我们进行一次展开之后我们就会发现表达式f(10) = f(8) + f(7) + f(8)中出现了两个f(8)，其实这个我们也称之为子问题，我们发现这个子问题可能被重复计算了 即使我们想办法解决了重复子问题的这个缺点（动态规划很擅长这个，同时也是动态规划问题中一个很核心的步骤），我们仍然需要大量的方法调用，这是递归的很明显的一个缺点，当我们的计算量比较大时，大量的方法调用，还是会对计算性能产生很大的影响。所以我上面也提到过，动态规划并不会止步于一个递归的解决方案，除此之外，它还会更进一步，再进一步，最终得到一个迭代的解决方案，让我们的程序更加快速高效地计算出我们想要的结果。  那么让我们回到这个问题本身，我们如何利用迭代的方式得到我们最终的结果呢？让我们想一下，如果只有一级阶梯，那么显然我们只有一种走法，因此我们可以得到f(1) = 1；如果有两级阶梯，我们要么分两步走，每步向上移动一级台阶，也可以一次性向上移动两级台阶，所以我们有两种可能的走法，所以可以得到f(2) = 3\n好的，很棒到目前为止一切都很棒，也很好理解。但是如果是三级台阶呢，哈哈，脑子是不是又转不过来了。不要怕，我们已经有了一个现成的方程式可以用了对吧，就是前面提到的f(n) = f(n - 1) + f(n - 2)，那么f(3)就应该等于f(2) + f(1)结果为3，同理让我们继续求解\n* `f(1) = 1` * `f(2) = 2` * `f(3) = f(2) + f(1) = 3` * `f(4) = f(3) + f(2) = 5` * `f(5) = f(4) + f(3) = 8` * `f(6) = f(5) + f(4) = 13` * `f(7) = f(6) + f(5) = 21` * `f(8) = f(7) + f(6) = 34` * `f(9) = f(8) + f(7) = 55` * `f(10) = f(9) + f(8) = 89` * ... 完美，我们得到了最终的答案，同时你也会发现，这个等号右边的数列似乎有些眼熟，哈哈，是不是没有想到斐波那契数列居然和爬楼梯有点关系，那么如果你腿比较长，偶尔可以跨三级或者四级阶梯，你知道怎么计算了吗哈哈。\n好的第一部分就到此结束了，只是简单感受一下动态规划，接下来我会讲一下动态规划的系统性方法，其实这是翻译自博客A Systematic Approach to Dynamic Programming，感兴趣的小伙伴也可以直接看原博客，这是我接触动态规划以来看到的最好最好的一篇博客了，后面也会将它翻译过来。\n动态规划的系统性方法 本文中，我们将接触动态规划中两种非常重要的方法，第一种称之为Memoization，第二种则是Tabulation，说实话这两种方法很难直接翻译成中文，直译过来总感觉不是很表意，如果一定要翻译过来，我只能选用备忘录模式和表格填充算法两个名字，但是这仍然会让人根感觉怪怪的，不过，当我们真的了解了这两种方法或者技术之后，有可能会感觉有那么一点味道在里面了。\n现在的话我们还是先把这两个名词放在一边吧，其实我更加倾向于使用另外两个名字来称呼他们\n Memoization - 自顶向下的方法 Tabulation - 自底向上的方法 至于此处为什么是自顶向下又为什么是自底向上，待会儿我们就知道了，我们暂且也先把他们放在这里吧，让我们一步步探究这个然后最终我们会再回过头来看下这几个名字。  简介 动态规划这个名词乍一看去可能会有点唬人，甚至很多人面对这样的名词会望而却步，害怕又是一种什么银样镴枪头亦或是有用但是晦涩难懂，不值得花时间去研究。\n甚至有人浅尝辄止，因为有的时候尝试去找一个状态迁移方程可能并没有那么容易，还有人甚至会用一些理由来避免使用Tabulation，比如性能已经可以了，再继续下去可能代码的可读性反而大大降低了，反而增加了一些成本。\n但是在我看来这些所谓Trade off远远阻挡不了一个对它感兴趣的人，的确，这种解决问题的技术会挑战我们的固有的依赖直觉的思考方式，大多数人前期很难快速的转变自己的思路来适应它，比如递归，回溯等等。但是动态规划在现实生活中又非常有用而且当一个面试官尝试评估候选人解决问题的技巧时动态规划也显得十分有吸引力以至于候选人不得不花时间了解这个，事实证明，抛开面试不谈这也是完全值得的。\n尝试用动态规划去解决一个问题时，整个过程是可以系统化地一步一步的向前推进的，我希望在这里向你分享这样一个我自己在使用动态规划解决问题时使用的一种系统化的过程，希望这对你学习动态规划以及后期使用动态规划产生一些帮助。\n我将首先介绍使用我自己在使用动态规划处理问题时所遵循的步骤。如果你对这些步骤里面的每一个条目都已经相当了解了，或许你会想要直接找一个问题然后尝试一下，看看究竟这种方法是如何工作的。如果你尚且不熟悉这些步骤里面描述的内容，我会向你详细解释每一个步骤具体是干什么还有为什么会被我放在这个位置。\n使用动态规划解决问题的一般步骤 首先，问你自己一个问题，我真的需要使用动态规划解决这个问题吗或者说我真的可以用动态规划解决这个问题吗。\n如果我们真的能够使用动态规划解决这个问题，那么针对我们需要解决的问题\n 定义我们的状态 定义我们的递归关系，或者说是状态迁移方程 列出所有状态转换及其各自状态迁移的条件 定义我们的基本情况 实现一个朴素的递归解决方案 使用自顶向下的方法（Memoization）对我们递归的解决方案进行优化 使用自底向上的方法（Tabulation）消除递归的开销  在我们开始按照这些步骤进一步探索之前，让我们先重申一下几个点\n 第一，这一篇文章只是对动态规划所涵盖的主要概念的一些概括，你会在其他的一些博客或者课程里面看到针对动态规划更加准确详细严格的解释。 第二，如果你尝试记住这篇文章里面出现的动态规划的解决方案或者尝试记住更多的动态规划解决方案对于你在未来解决其他的一些动态规划问题可能并没有什么帮助，学习如何一步步得到最终的解决方案才能从根本上理解并学会使用动态规划。 第三，我不是一个动态规划的专家，本文中所涵盖的任何提示或者技巧性的内容只是我作为一个计算机专业的学生在学习动态规划的过程中发现的。  我可以使用动态规划解决这个问题吗 首先，让我们再尝试描述一下动态规划究竟是什么。简而言之，动态规划是一种解决复杂问题的技术，旨在通过首先解决这个复杂问题的子问题，解决子问题时，又可以使用同样的思路，首先解决这个子问题的子问题，如此循环往复达到最终解决整个复杂问题，这里需要声明的是每一个子问题，我们最多只会求解一次。\n动态规划被广泛用于解决与优化相关的问题。 判断您的问题是否适合使用动态规划去解决的一个技巧是找到暗示优化的关键字，例如最大、最小、最长或最短。\n一个问题是否能够使用动态规划进行解决通常取决于这个问题是否有一个计算最优解的结构以及重叠子问题。在一些学术文档中，你可能能够找到针对这些术语的更为准确详尽的解释，但是简而言之\n 为了搞清楚一个问题是否是一个计算最优解的结构，首先你得问你自己，你能否用一种递归的关系来描述你的解决方案。如果可以，那么你就能将这个复杂问题转换为一堆更容易解决的子问题，当这些子问题被逐个解决之后，你便能够根据递归条件将你的子问题的结果进行聚合，得到最终的结果。比如前面提到的例子，斐波那契数列。 为了搞清楚当前问题是否包含重叠子问题，也需要先问你自己，当你解决这个问题的时候，你有没有发现某一些子问题被你的程序重复解决了很多遍。比如当你尝试在大脑中进行斐波那契数列的计算时，第一次展开之后你就发现，你需要计算两次f(8)。这种就可以明确的回答出，你正在解决的这个问题包含重叠子问题。  要点在于，如果你发现问题描述中提示你找到最优解，那么你就应该对你的问题进行评估，看这个问题是否有一个计算最优解的结构而且能不能找到重叠子问题，然后动态规划或许就是一个解决此问题的非常合适的方案。\n递归和回溯非常重要 在尝试用动态规划解决问题时，递归是一个非常基本的技术。在递归时，你有有一个函数，它会一层一层调用他自己直到遇到了这个问题的基本情况或者说终止条件，比如当我们计算斐波那契数列f(3)的结果时，我们就会遇到终止条件，因为f(1) = 1;f(2) = 2，这是我们很容易得到的答案。这些函数我们也就称之为递归函数。\n此外，回溯是一种使用递归来解穷举结果的技术。在这些问题中，我们必须对多种可能的结果进行评估才能够最终获得我们最优的解决方案，因为这些问题通常涉及选择的排列或组合，所以它们也被称为组合搜索问题。一个例子就是福尔摩斯最经典的语录，当我排除了所有可能性，剩下的那个就是最终的结果。在回溯中，当我们遇到了一个合理的或者不合理的结果又或者是终止条件，我们会将我们的递归流程回退一级，然后继续从其他可能的路径开始搜索，所以我们程这种方式为回溯。\n I’m Sherlock Holmes, the world’s only consulting detective. I’m not going to go into detail about how I do what I do because chances are you wouldn’t understand. If you’ve got a problem that you want me to solve, then contact me. Interesting cases only please.\nThis is what I do:\n I observe everything. From what I observe, I deduce everything. When I’ve eliminated the impossible, whatever remains, no matter how mad it might seem, must be the truth.  If you need assistance, contact me and we’ll discuss its potential.\n 让我们看一个回溯的例子，求解一组数字所有可能的排列组合，为了便于理解，这里选择的最简单的一个版本，即这组数字每一个都是唯一的。代码摘自Leet Code Permutations。\npublic class Solution {  public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; subsets(int[] nums) {  List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; list = new ArrayList\u0026lt;\u0026gt;();  Arrays.sort(nums);  backtrack(list, new ArrayList\u0026lt;\u0026gt;(), nums, 0);  return list;  }   private void backtrack(List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; list , List\u0026lt;Integer\u0026gt; tempList, int [] nums, int start){  list.add(new ArrayList\u0026lt;\u0026gt;(tempList));  for(int i = start; i \u0026lt; nums.length; i++){ //递归终止条件  tempList.add(nums[i]); //附加  backtrack(list, tempList, nums, i + 1); //递归  tempList.remove(tempList.size() - 1); //清理  }  } } 这个代码整体结构非常简单，可以看到我们什么时候将数字append到列表中，然后增加开始索引并开始新的递归，注意递归结束我们还需要对递归前append的数据进行清理，通常回溯都会有这么一个标志性的清理操作。同时循环的终止条件其实就是我们的基础场景也就是我们说的到达了递归终止条件。\n好了，花点时间联系递归和回溯吧，多加练习才能适应这种一个方法会调用他自己的实现方式。一旦你适应了这种实现方式，你的代码里面可能会充斥大量这种递归函数，那时候，你就有一个新的问题了。\n动态规划的方法 正如前面提到的，动态规划的两个主要方式就是memoization（自顶向下的方式）和tabulation（自底向上的方式）。\n到目前为止，我们已经瞥见了递归和回溯在使用动态规划过程中的重要性，即将一个复杂问题拆分为这个问题更小的实例（这么说主要是为了说明复杂问题和拆分出来的子问题的相似性），也就是子问题。但是上面提到的解决方案，不论是斐波那契数列还是罗列一组不重复的数字所有可能的组合，我们都没有将其归类为动态规划的解决方案。\n对于一个朴素的递归解决方案，如果想要把它转换为一个称得上是动态规划的解决方案，我们还需要更进一步，对其进行优化，缓存每一个子问题的计算结果。再上面的定义中，重点是每个子问题我们只会解决它一次，此处的一次应该强调再强调。\nMemoization - 自顶向下的方式 Memoization等于递归加缓存。\n对一个值得使用动态规划进行解决的问题，一般它的结构表明它通常包含重叠子问题，还记得我们上面提到的斐波那契数列吗，让我们看下最简单的递归的代码实现，\nclass Solution {  public int fib(int number)  {  if(number \u0026lt;= 1) {  return number;  }   return fib(number - 1) + fib(number - 2);  } } 如果我们把整个的递归树画出来，我们会得到\n注意每一个子问题我们重复解决了多少次，比如，f(3)计算了5次，然后每一个f(3)又会重复调用两次斐波那契函数，为了解决f(3)这个子问题我们多花了很多次函数调用。现在我们来看下动态规划，我们会尝试使用一个恰当的数据结构存储我们的计算结果，从而当晚些我们需要再次计算的时候可以直接返回这个结果，这样我们就做到了对所有子问题我们仅仅解决它一次，而这就是我们所说的Memoization。现在你大概能理解我为什么之前会把它翻译成备忘录模式了吧。\nclass Solution {  public int fib(int number) {  //注意此处使用了Integer做缓存的key，由于Java Integer的缓存原因，只有在key值小于128时这段代码才能正确运行  Map\u0026lt;Integer,Integer\u0026gt; memoization = new HashMap\u0026lt;\u0026gt;();   return fib_helper(number, memoization);  }   public int fib_helper(int number, Map\u0026lt;Integer,Integer\u0026gt; memoization) {  if(number \u0026lt;= 1) {  return number;  }   return memoization.computeIfAbsent(number, fib(number - 1) + fib(number - 2));  } } 上面这段代码将会是本文想要展示的两种动态规划方法中的比较简单的一种，很好理解。当你得到一个问题的递归形式的解决方案之后，确保你正确使用了缓存，来保证你的子问题不会被重复计算。\n其实再对比一下这两个实现方式，你就会发现其实这就是计算机编程里面老生常谈的一个问题\u0026ndash;Trade off，我们在这里只不过是使用内存换时间而已。我们使用更多的内存空间存储了一些中间结果以此来达到更好的性能，这也是动态规划通常的工作方式。\n当然了，由于计算f(n)时，我们必须计算f(1)到f(n - 1)，所以此处我们将缓存换成一个长度为n的以为数组可能会更加高效。不过我们暂且先这样设计吧，之后做Tabulation时我们可以再进行下一步的优化，我们甚至不需要长度为n的一维数组，只需要常量的空间就足够了。\n有时候，使用Map或者一维数组等进行缓存可能不足以解决我们的问题，我们可能需要二维数组或者其他类型的数据结构。比如当我们解决经典的背包问题的时候，就可能需要一个二维数组。\nMemoization很棒，我们既有使用递归解决问题的优雅，每个重叠子问题我们也只解决一次。但是，并非一切都那么好，我们仍在进行大量递归调用。递归在处理器时间和内存空间上都是昂贵的，而且大多数递归函数会随着完成任务所需的递归调用次数线性消耗调用堆栈内存。\n有一些特殊类型的递归函数，称为尾递归，如果优化正确，不一定会线性增加调用堆栈。这些可以在常量调用堆栈空间上执行。无需赘述，尾递归函数在其执行结束时执行递归调用，这意味着其堆栈帧此后将无用。可以重复使用相同的堆栈内存空间来保存下一次递归调用的状态 出现的问题是处理退货地址。我们希望确保在递归树结束后，您返回到开始一系列递归调用的指令。\n递归函数总是可能遇到潜在的堆栈溢出问题，比如Python默认允许的最大栈深度是1000，如果你尝试使用带有递归的Python方法来解决一个问题，该问题的调用栈超过1000次调用的递归深度，你就会得到一个堆栈溢出异常。\nTabulation - 自底向上的解决方法 待翻译。。。\n","date":"2022年3月25日","image":null,"permalink":"/post/system-approach-to-dp/","title":"动态规划的系统性方法"},{"categories":["Tutorials"],"contents":"本文中，我将会简单讨论什么是静态页面生成，简单了解几种比较流行的静态页面生成器并选取其中一种名叫Hugo的静态页面生成器进行详细介绍。 事实上，您现在所看到的的内容正是基于Hugo以及其最受欢迎的主题Log Book所构建的。\n目录  什么是静态网站生成 为什么仍然需要静态网站 常见的一些静态页面生成器 Hugo / Jekyll / Hexo 准备工作  第一步 - 安装Go 第二步 - 安装Hugo 第三步 - 让我们简单认识一下Hugo CLI  hugo命令 草稿 / 未来 / 过期内容 hugo server / 热加载     开始网站搭建  第一步 - 创建一个网站 第二步 - 为你的网站添加主题 第三步 - 为你的网站添加一些内容 第四步 - 启动Hugo Server   部署我们的网站到服务器  第一步 - 换一个好看的主题 第二步 - 构建我们需要部署的静态资源 第三步 - 推送文件到远程仓库 第四步 - 使用Nginx部署网站   踩坑记录  什么是静态网站生成  所谓静态网站生成或者静态页面生成是指一种处理过程，其能够静态地生成一个网站，这个网站可能由一系列的静态的HTML页面组成。 通常，我们在本地环境通过这种流程生成静态的页面，然后我们将其上传至对应的服务器进行发布，当用户请求对应的资源时，我们直接将这些资源返回给用户进行展示。 整个过程中，不需要任何的服务器端渲染或者处理，客户端和服务器也不会有其他形式的数据传输，仅仅专递静态资源文件。\n事实上，在互联网诞生之初，第一个网站就是静态的，那时候，服务器只能返回一些非常原始的静态的页面，并没有想PHP这样的脚本语言，也不依赖于任何类似Mysql这样的数据库管理系统。\n为什么仍然需要静态网站  今天，我们已经拥有了海量的非常高效的软件和技术，比如服务端语言，数据库以及内容管理系统等，那么我们为什么还需要静态网站呢？\n 内容直接使用文件进行存储，不依赖于数据库 一个静态网站不需要服务器端渲染 静态网站比动态网站更快因为它不需要服务端渲染以及数据访问 静态网站比动态网站更加安全因为它不太可能暴露安全漏洞 使用CDN，静态网站很容易扩展 缓存静态文件资源比缓存动态数据以及页面等更加高效 对于博客这种数据，使用静态页面进行构建是再合适不过得了  常见的一些静态页面生成器  静态页面生成器，顾名思义，用来生成静态页面或者说静态网站的一种技术或者工具。 生成，那就意味着除了一般的静态内容维护之外，这些技术或者功能往往还能提供一些非常好用的功能特性，使我们的页面看起来更加的绚丽，维护起来也会更加的方便。\nJekyll \u0026amp; Hexo \u0026amp; Hug0   Jekyll - 由Github构建的一款静态内容生成器，基于Ruby，用于驱动Github Page Hexo - 一款基于Nodejs的静态内容生成器 Hugo - 一款基于Go语言的静态内容生成器，非常快速  基于Hugo \u0026amp; Nginx搭建博客  Hugo是最流行的开源静态站点生成器之一。凭借其惊人的速度和灵活性，Hugo让搭建网站再次变得有趣。\n 飞快的构建速度 - Hugo 是同类中最快的工具。每个页面的构建时间小于1ms时，网站的平均构建时间不到一秒钟。 健壮的内容管理 - Hugo 支持无限的内容类型、分类、菜单、动态 API 驱动的内容等，所有这些都无需插件。 短代码(Shortcodes) - 我们喜欢 Markdown 语法的漂亮、简洁，但有时我们需要更多的灵活性。Hugo 短代码满足了美观和灵活的需求。 内置模板 - Hugo 提供了预制的模板，可以快速完成 SEO、评论、统计和其他功能。一行代码，完成所有工作。 支持多语言 \u0026amp; i18n - Hugo 为多语言站点提供了完整的 i18n 支持，并且与 Hugo 用户喜欢的单语言站点的开发体验完全相同。 定制输出 - Hugo 允许以多种格式输出您的内容，包括 JSON 或 AMP，并使您可以轻松创建自己的内容。  准备工作  第一步 - 安装Go  ➜ ~ brew install go ➜ ~ go version 第二步 - 安装Hugo  #Hugo有很多种安装方式，此处我们使用从源码进行安装，因为我们需要Hugo Extended版本来启动scss文件的处理功能  #因为我们暂时不需要同这个仓库进行协作，所以此处设置depth为1，否则需要拉取大量的代码 ➜ ~ mkdir ~/src \u0026amp;\u0026amp; cd ~/src \u0026amp;\u0026amp; git clone https://github.com/gohugoio/hugo.git --depth=1  #构建完成之后，hugo目录应该在 ~/go/bin ➜ ~ cd hugo \u0026amp; go install --tags extended  #将$HOME/go/bin添加到执行路径中，也可以将此行代码添加到/etc/profile或者~/.zshrc文件中 ➜ ~ export PATH=\u0026#34;$PATH:$HOME/go/bin\u0026#34;  #验证是否安装成功，能多内容参见https://hugo.zcopy.site/getting-started/usage/ ➜ ~ hugo help 第三步 - 让我们简单认识一下Hugo CLI  ➜ ~ hugo help hugo is the main command, used to build your Hugo site.  Hugo is a Fast and Flexible Static Site Generator built with love by spf13 and friends in Go.  Complete documentation is available at http://gohugo.io/.  Usage:  hugo [flags]  hugo [command]  Available Commands:  completion Generate the autocompletion script for the specified shell  config Print the site configuration  convert Convert your content to different formats  deploy Deploy your site to a Cloud provider.  env Print Hugo version and environment info  gen A collection of several useful generators.  help Help about any command  import Import your site from others.  list Listing out various types of content  mod Various Hugo Modules helpers.  new Create new content for your site  server A high performance webserver  version Print the version number of Hugo  Flags:  -b, --baseURL string hostname (and path) to the root, e.g. http://spf13.com/  -D, --buildDrafts include content marked as draft  -E, --buildExpired include expired content  -F, --buildFuture include content with publishdate in the future  --cacheDir string filesystem path to cache directory. Defaults: $TMPDIR/hugo_cache/  --cleanDestinationDir remove files from destination not found in static directories  --config string config file (default is path/config.yaml|json|toml)  --configDir string config dir (default \u0026#34;config\u0026#34;)  -c, --contentDir string filesystem path to content directory  --debug debug output  -d, --destination string filesystem path to write files to  --disableKinds strings disable different kind of pages (home, RSS etc.)  --enableGitInfo add Git revision, date, author, and CODEOWNERS info to the pages  -e, --environment string build environment  --forceSyncStatic copy all files when static is changed.  --gc enable to run some cleanup tasks (remove unused cache files) after the build  -h, --help help for hugo  --ignoreCache ignores the cache directory  --ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern  -l, --layoutDir string filesystem path to layout directory  --log enable Logging  --logFile string log File path (if set, logging enabled automatically)  --minify minify any supported output format (HTML, XML etc.)  --noChmod don\u0026#39;t sync permission mode of files --noTimes don\u0026#39;t sync modification time of files  --panicOnWarning panic on first WARNING log  --poll string set this to a poll interval, e.g --poll 700ms, to use a poll based approach to watch for file system changes  --printI18nWarnings print missing translations  --printMemoryUsage print memory usage to screen at intervals  --printPathWarnings print warnings on duplicate target paths etc.  --printUnusedTemplates print warnings on unused templates.  --quiet build in quiet mode  --renderToMemory render to memory (only useful for benchmark testing)  -s, --source string filesystem path to read files relative from  --templateMetrics display metrics about template executions  --templateMetricsHints calculate some improvement hints when combined with --templateMetrics  -t, --theme strings themes to use (located in /themes/THEMENAME/)  --themesDir string filesystem path to themes directory  --trace file write trace to file (not useful in general)  -v, --verbose verbose output  --verboseLog verbose logging  -w, --watch watch filesystem for changes and recreate as needed  Use \u0026#34;hugo [command] --help\u0026#34; for more information about a command. 可以看到Hugo提供了很多的功能，但是在此篇博客中，我们会跳过大部分的命令，只介绍我们可能需要用到的部分。\nhugo命令  要说最常用的命令那一定是hugo了，其将你当前所在目录作为工作目录执行hugo。\n这个操作默认会基于你当前工作目录的内容生成你的静态网站，通常这些生成的静态资源放在/public目录下，当然你也可以通过手动指定publishDir来进行控制。\nhugo命令将你的网站渲染到/public目录，这样你的静态网站就可以部署到你的服务器上了。\n草稿 \u0026amp; 未来 \u0026amp; 过期内容  Hugo允许你为你想要发布的内容设置draft，publishdate，expirydate这三个属性。 顾名思义，分别表示这个待发布的内容是否是一个草稿文件，这个待发布的内容计划的发布日期，这个待发布的内容的预计过期时间。 默认情况下，Hugo不会帮你发布：\n draft: true，也就是目前尚且是草稿的内容 publishdate: future date，也就是计划在未来发布的内容 expirydate: past date，也就是已经过期的内容  当然了，Hugo也为这些特性提供了非常方便的控制方式。 你可以通过在本地开发或者生产部署时添加相应的标志来进行控制，也可以直接在你的配置文件中进行配置。 此外，在适当的时间直接调整你待发布的内容，调整其各个属性比如draft，publishdate，expirydate，似乎更加合理。\n \u0026ndash;buildDrafts #构建文件即使draft等于true \u0026ndash;buildFuture #构建文件即使publishdate是一个未来的时间，即文件尚未到达发布时间 \u0026ndash;buildExpired #构建文件即使expirydate是一个过去的时间，即文件已经过期  hugo server \u0026amp; 热加载  通常，当我们在构建我们的网站时，我们会一边开发可以一边预览我们的网站的实际效果，这通过一个简单的命令hugo server就可以搞定了。 这会为你启动一个简单的服务器将你的静态网站托管在上面，然后你就可以在浏览器中对你的网站进行预览了。\n此外，Hugo还为我们内置了热加载的功能，这意味着你不需要安装任何其他的类库或者插件就可一边进行开发一边实时的预览的网站效果。 通常，以下目录中的文件发生变更时将会触发重新构建以及热加载。\n /static/* /content/* /data/* /i18n/* /layouts/* /themes//* config  PS \u0026gt; 如果你正在准备的内容状态为draft: true，在运行hugo server命令时不要忘了加上--buildDrafts；publishdate，expirydate也是类似\n 当然了，我们也可以禁用掉热加载\n➜ ~ hugo server --watch=false  #或者  ➜ ~ hugo server --disableLiveReload  #或者 ➜ ~ echo \u0026#34;disableLiveReload: true\u0026#34; \u0026gt;\u0026gt; config.yaml 开始网站搭建  第一步 - 创建一个网站  很简单，直接运行hugo new site {your site name}\n➜ ~ hugo new site serius Congratulations! Your new Hugo site is created in ~/serius.  Just a few more steps and you\u0026#39;re ready to go:  1. Download a theme into the same-named folder.  Choose a theme from https://themes.gohugo.io/ or  create your own with the \u0026#34;hugo new theme \u0026lt;THEMENAME\u0026gt;\u0026#34; command. 2. Perhaps you want to add some content. You can add single files  with \u0026#34;hugo new \u0026lt;SECTIONNAME\u0026gt;/\u0026lt;FILENAME\u0026gt;.\u0026lt;FORMAT\u0026gt;\u0026#34;. 3. Start the built-in live server via \u0026#34;hugo server\u0026#34;.  Visit https://gohugo.io/ for quickstart guide and full documentation. 让我们来简单看下我们的目录结构\n➜ ~ hugo cd serius \u0026amp;\u0026amp; ls -al total 8 drwxr-xr-x 9 hugo staff 288 Mar 22 21:12 . drwxr-xr-x 7 hugo staff 224 Mar 22 21:12 .. drwxr-xr-x 3 hugo staff 96 Mar 22 21:12 archetypes -rw-r--r-- 1 hugo staff 82 Mar 22 21:12 config.toml drwxr-xr-x 2 hugo staff 64 Mar 22 21:12 content drwxr-xr-x 2 hugo staff 64 Mar 22 21:12 data drwxr-xr-x 2 hugo staff 64 Mar 22 21:12 layouts drwxr-xr-x 2 hugo staff 64 Mar 22 21:12 static drwxr-xr-x 2 hugo staff 64 Mar 22 21:12 themes 正如你所看到的的，Hugo为我们生成的目录结构非常的简单，也非常直观\n. ├── archetypes #当你使用hugo new命令区创建一个新的内容时，可以通过指定archetype来快速添加一些内容，比如标题，创建日期，draft：true ├── config.toml #你的网站的配置文件 ├── content #你的网站的主体内容 ├── data #你的数据 ├── layouts ##你的布局信息 ├── static #你的静态资源比如css，js等，其实还有一个资源文件目录assets，默认情况下不会创建这个目录，这个目录一般用于存储图片文件等 └── themes #你的网站的主体，你可以很轻松的更换一个主题，只需要将其放到这个目录并调整你的配置文件即可 PS \u0026gt; 你可以在Get Hugo Theme查看更多主题。 但是你可能需要进行购买，单个主题是49到79美元，相比之下一个捆绑包才99美元（又一个价值杠杆的标志性例子）可能更划算。 如果你有一些功能想要尝试一些比较好看的主题，你可以联系我，我现在已经购买了整个捆绑包，我这边会免费和你协作，比如直接Contribute到你的仓库（相信不收费的话应该没有违反license了吧[Doge][Doge][Doge]）。\n 第二步 - 为你的网站添加主题  #使用Git来对你的网站进行版本控制 ➜ serius git init  #使用git submodule将一个主题themes/ananke直接添加到你的themes目录下 ➜ serius git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke  #更改的你的配置文件来启用这个主题，这样你的主题就添加好了 ➜ serius echo theme = \\\u0026#34;ananke\\\u0026#34; \u0026gt;\u0026gt; config.toml 第三步 - 为你的网站添加一些内容  你可以手动创建一些内容到指定的路径，比如content/\u0026lt;CATEGORY\u0026gt;/\u0026lt;FILE\u0026gt;.\u0026lt;FORMAT\u0026gt;，然后你可以手动的为其添加一些元数据，比如标题，创建时间，是否是草稿等等。\n此外你也可以使用前面提到的hugo new命令辅助你进行创建，像前面提到的，此时会使用默认的archetype帮助你创建新的内容，可以自动帮你添加标题，创建时间，是否是草稿等元数据。\n➜ serius hugo new posts/hello-hugo.md  ➜ serius echo \u0026#34;# Hello Hugo\u0026#34; \u0026gt;\u0026gt; content/posts/hello-hugo.md ➜ serius echo \u0026#34;Hello hugo, this is my first post build by hugo new command.\u0026#34; \u0026gt;\u0026gt; content/posts/hello-hugo.md  ➜ serius cat content/posts/hello-hugo.md --- title: \u0026#34;Hello Hugo\u0026#34; date: 2022-03-22T21:46:58+08:00 draft: true ---  # Hello Hugo Hello hugo, this is my first post build by hugo new command. 第四步 - 启动Hugo Server  然后我们就用启动Hugo Server来预览我们的网站了。\n➜ serius git:(master) ✗ hugo server -D Start building sites … hugo v0.96.0-DEV-b80853de90b10171155b8f3fde47d64ec7bfa0dd+extended darwin/amd64 BuildDate=2022-03-17T21:03:27Z   | EN -------------------+-----  Pages | 10  Paginator pages | 0  Non-page files | 0  Static files | 1  Processed images | 0  Aliases | 1  Sitemaps | 1  Cleaned | 0  Built in 100 ms Watching for changes in ~/Workplace/hugo/serius/{archetypes,content,data,layouts,static,themes} Watching for config changes in ~/Workplace/hugo/serius/config.toml, ~/Workplace/hugo/serius/themes/ananke/config.yaml Environment: \u0026#34;development\u0026#34; Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop 打开浏览器，输入http://localhost:1313/，就可访问你的第一个静态网站了。 部署我们的网站到服务器  好了网站已经准备好了，现在我们来将我们的网站部署到我们的服务器上。此处我先假定你已经\n 购买了一个云服务器 申请了自己的域名 购买了DNS服务并完成了对应的域名解析 进行了网站的备案 为你的域名申请了响应的证书 在你的服务器上安装了Nginx并且配置好了响应的证书  即使你没有完成上述步骤也没有关系，之后我会写一篇新的文章来详细介绍上述内容。接下来我们会在上面这些已经配置完成的基础上进行。\n第一步 - 换一个好看的主题  在我们将网站部署到服务器之前，我们可以先为它装扮一个好看的主体。你可以访问Get Hugo Theme查看更多主题， 不过这上面大多数主题都是收费的，具体怎么免费试用，应该不用我再教你一遍了吧。好了，废话不多说，直接开始吧。\n此处我们选用Hugo非常受欢迎的一款主题来进行操作，这款主题名叫Log Book. 你可以查看前面的链接来预览这个主题。 此文档中也包含了如何安装这款主题，其实很简单，之前我们是通过Git Submodule克隆了一款主题，现在我们在Get Hugo Theme上 直接下载拿到的就是主题的源文件以及对应的一个example site。\n➜ logbook-hugo ls -al total 48 drwx------@ 8 hugo staff 256 Jan 13 13:43 . drwx------@ 407 hugo staff 13024 Mar 22 20:18 .. -rw-r--r--@ 1 hugo staff 6148 Mar 18 23:54 .DS_Store -rw-r--r--@ 1 hugo staff 2074 Dec 29 12:51 changelog.md -rw-r--r--@ 1 hugo staff 84 Aug 25 2021 documentation.html -rw-r--r--@ 1 hugo staff 91 Aug 25 2021 hire-us.html -rwxr-xr-x@ 1 hugo staff 101 Jan 22 18:05 license.html drwxr-xr-x@ 4 hugo staff 128 Dec 29 12:49 themes ➜ logbook-hugo cd themes/logbook \u0026amp;\u0026amp; ls -al ➜ logbook ls -al total 32 drwxr-xr-x@ 10 hugo staff 320 Jan 4 11:54 . drwxr-xr-x@ 4 hugo staff 128 Dec 29 12:49 .. -rw-r--r--@ 1 hugo staff 6148 Mar 18 23:59 .DS_Store drwxr-xr-x@ 4 hugo staff 128 Dec 29 12:45 .forestry drwxr-xr-x@ 3 hugo staff 96 Dec 15 15:20 archetypes drwxr-xr-x@ 5 hugo staff 160 Dec 15 15:20 assets -rw-r--r--@ 1 hugo staff 2179 Dec 29 12:05 config.toml drwxr-xr-x@ 11 hugo staff 352 Dec 29 12:09 exampleSite drwxr-xr-x@ 11 hugo staff 352 Dec 29 11:55 layouts -rw-r--r--@ 1 hugo staff 491 Dec 29 12:47 netlify.toml ➜ logbook cd exampleSite \u0026amp;\u0026amp; ls -al total 24 drwxr-xr-x@ 11 hugo staff 352 Dec 29 12:09 . drwxr-xr-x@ 10 hugo staff 320 Jan 4 11:54 .. -rw-r--r--@ 1 hugo staff 6148 Jan 4 11:55 .DS_Store -rw-r--r--@ 1 hugo staff 0 Dec 15 15:20 .hugo_build.lock drwxr-xr-x@ 4 hugo staff 128 Dec 29 12:09 assets drwxr-xr-x@ 4 hugo staff 128 Jan 4 11:55 config drwxr-xr-x@ 4 hugo staff 128 Dec 26 12:20 content drwxr-xr-x@ 4 hugo staff 128 Dec 15 15:20 i18n -rw-r--r--@ 1 hugo staff 421 Dec 29 12:47 netlify.toml drwxr-xr-x@ 3 hugo staff 96 Dec 29 11:48 resources drwxr-xr-x@ 5 hugo staff 160 Dec 15 15:20 static 好了，上面就是整个主题的大致结构了。那么我们只需要\n 复制logbook到你的网站的themes目录下 复制exampleSite目录下的所有内容到你的网站的根目录 删除themes/logbook/exampleSite目录下的所有内容 更改配置文件，调整使用的主题的名称为logbook 执行hugo server -D, 打开你的浏览器，然后BOOM！！！  好的，到此我们新的主题就已经更换好了，而且，由于我们使用了log book提供的example site，所以整个网站看起来已经相当的丰富了。 然后你就可以尽情探索这一款主题了，各种风格的布局，各个不同的模块等等。\n第二步 - 构建我们需要部署的静态资源  好了，让我们回归主题，现在我们已经准备好了我们想要发布的内容，现在就是将其构建为静态资源。\n在此之前，我们需要做一点小小的配置改动。\n关于更加完整的Hugo的配置，详情请参考Hugo Configuration。 关于更加完整的Log Book的配置，详情请参考Log Book Configuration。\n此处我们需要调整的配置是baseUrl。这个配置是你的网站的基础路径。 为什么需要调整这个呢，因为我们的整个博客框架里面充斥着大量的连接，方便我们快速的进行导航，比如从主页跳转的某一篇文章，或者从主页直接跳转到你的个人信息等等。 所以我们需要告诉我们的静态资源生成器，我们的网站的根路径是什么，比如https://www.example.com/， 这样它就知道当我们跳转时，是应该从https://www.example.com/home跳转到https://www.example.com/me，而不是http://localhost:1313/me.\n#调整baseUrl为你的网站地址，比如baseURL = \u0026#34;https://www.tlst.cc/\u0026#34; ➜ themes vi /config/_default/config.toml  #生成静态文件 ➜ themes hugo -D 此时我们会发现，目录下面多了一个public文件夹，这就是我们默认的静态资源生成到的文件目录。\n第三步 - 推送文件到远程仓库  #设置你的仓库地址 ➜ serius git remote set-url origin https://github.com/{your repo here}.git  #添加并提交 ➜ themes git add -A \u0026amp;\u0026amp; git commit -m \u0026#34;{your commit message here}\u0026#34;  #推送到远程 ➜ themes git branch --set-upstream-to=origin/master master \u0026amp;\u0026amp; git push PS \u0026gt; 此处我将构件好的public目录直接推送到了远程，其实本来可以只推送内容，然后在服务器上安装Go和Hugo然后再生成相应的静态资源。 但是博主使用的Linux服务器操作系统是CentOS 7，在CentOS 7上目前没有extended版本的hugo可用。我曾尝试基于源码编译，但是执行Go install时 由于一些政策限制无法正常下载依赖的类库等无法构建。 我也曾尝试在本地用Docker启动对应的CentOS环境进行源码编译，但是最终构建失败，一些版本的依赖无法正确解析。最终只能放弃。\n 第四步 - 使用Nginx部署网站  最后一步就是使用Nginx部署我们的网站了。这一步相对来说就非常简单了，只需要将我们的源码克隆到我们的服务器上，然后再将public目录复制到Nginx默认的静态资源根目录/usr/share/nginx/html就好。\n我也曾尝试调整nginx配置将root直接指向Git Repo的public目录，但是Nginx访问时直接403 Forbidden了，目前尚未花时间进行排查。\n好了，话不多说，先直接看我的Nginx的配置文件，其中包含了证书配置的部分，如果你暂时没有申请证书，那么可以先暂时忽略。\n➜ ~ cat /etc/nginx/nginx.conf  user nginx; worker_processes auto; error_log /var/log/nginx/error.log; pid /run/nginx.pid;  include /usr/share/nginx/modules/*.conf;  events {  worker_connections 1024; }  http {  log_format main \u0026#39;$remote_addr - $remote_user [$time_local] \u0026#34;$request\u0026#34; \u0026#39;  \u0026#39;$status $body_bytes_sent \u0026#34;$http_referer\u0026#34; \u0026#39;  \u0026#39;\u0026#34;$http_user_agent\u0026#34; \u0026#34;$http_x_forwarded_for\u0026#34;\u0026#39;;   access_log /var/log/nginx/access.log main;   sendfile on;  tcp_nopush on;  tcp_nodelay on;  keepalive_timeout 65;  types_hash_max_size 4096;   include /etc/nginx/mime.types;  default_type application/octet-stream;   include /etc/nginx/conf.d/*.conf;    server {  listen 80;  server_name www.tlst.cc;  rewrite ^(.*)$ https://$host$1; #将所有HTTP请求通过rewrite指令重定向到HTTPS。  location / {  index index.html index.htm;  }  }   server {  listen 443 ssl;  server_name {your domain}; #需要将yourdomain.com替换成证书绑定的域名。  root html;  index index.html index.htm;  ssl_certificate certs/{your domain}.pem; #需要将cert-file-name.pem替换成已上传的证书文件的名称。  ssl_certificate_key certs/{your domain}.key; #需要将cert-file-name.key替换成已上传的证书密钥文件的名称。  ssl_session_timeout 5m;  ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;  ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #表示使用的TLS协议的类型。  ssl_prefer_server_ciphers on;  location / {  try_files $uri $uri/ =404;  add_header Cache-Control \u0026#34;public, max-age=3600\u0026#34;;  }   location ~ \\.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|mp4|ogg|ogv|webm|htc|webp)$ {  add_header Cache-Control \u0026#34;public, s-maxage=7776000, max-age=86400\u0026#34;;  }   location ~ \\.(css|js)$ {  add_header Cache-Control \u0026#34;public, max-age=31536000\u0026#34;;  }   location /assets/fonts/ {  add_header Cache-Control \u0026#34;public, s-maxage=7776000, max-age=86400\u0026#34;;  }  } } ➜ ~ 接下来让我们部署我们的静态网站到我们的服务器。\n#克隆你的仓库 ~ git clone https://github.com/{your repo here}.git  #复制你的public文件目录到nginx的静态资源root ~ cd {your repo name} \u0026amp;\u0026amp; rm -rf /usr/share/nginx/html \u0026amp;\u0026amp; cp public /usr/share/nginx/html  #重新加载一下nginx ~ nginx -s reload OK，至此，我们的静态网站就搭建起来啦~\n踩坑记录   baseUrl的设置  通过跳转的链接发现的这个问题，改成网站基础路径就好了   CentOS 7无法构建Hugo  目前只能将构建好的public静态资源目录推送到Git Repo   构建静态资源时，也就是 hugo -D时，有一次构建出来的所有的图片文件（后缀为webp）内容均为空， 导致http请求返回Code 200但是实际的Content Length为0，一度以为是Nginx除了问题，知道最后我 执行了一下ls -al，看到了文件的实际大小。  临时的解决方案就是构建之前，先全部删除，不过之后还想研究下增量构建的，比如只构建未来发布的内容， 这个通过publishdate很容易控制的，这样的话，由于我们把public目录直接上传上去导致的每次git 提交内容巨多的问题就解决了。    ","date":"2022年3月21日","image":null,"permalink":"/post/blog-with-go-hugo-nginx/","title":"基于Hugo \u0026 Nginx搭建博客"},{"categories":null,"contents":"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren.\n","date":"2020年4月14日","image":null,"permalink":"/shop/product-3/","title":"School Bag"},{"categories":null,"contents":"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren.\n","date":"2020年3月14日","image":null,"permalink":"/shop/product-7/","title":"Blue Jacket"},{"categories":null,"contents":"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren.\n","date":"2020年3月14日","image":null,"permalink":"/shop/product-6/","title":"Cotton T-Shirt"},{"categories":null,"contents":"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren.\n","date":"2020年3月14日","image":null,"permalink":"/shop/product-1/","title":"Linen Bag"},{"categories":null,"contents":"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren.\n","date":"2020年3月14日","image":null,"permalink":"/shop/product-4/","title":"Pink T-Shirt"},{"categories":null,"contents":"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren.\n","date":"2020年3月14日","image":null,"permalink":"/shop/product-2/","title":"Side Bag"},{"categories":null,"contents":"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren.\n","date":"2020年3月14日","image":null,"permalink":"/shop/product-8/","title":"Travel Carrier"},{"categories":null,"contents":"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren.\n","date":"2020年2月14日","image":null,"permalink":"/shop/product-5/","title":"Travel Bag"},{"categories":null,"contents":"H1 Heading H2 Heading H3 Heading H4 Heading H5 Heading H6 Heading  Paragraph Did you come here for something in particular or just general Riker-bashing? And blowing into maximum warp speed, you appeared for an instant to be in two places at once. We have a saboteur aboard. We know you’re dealing in stolen ore. But I wanna talk about the assassination attempt on Lieutenant Worf. Could someone survive inside a transporter buffer for 75 years? Fate. It protects fools, little children, and ships.\n Emphasis :  Did you come here for something in particular or just general Did you come here for something in particular Did you come here Did you come here for something in particular Did you come here for something in particular  Did you come here for something in particular URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or http://www.example.com and sometimes example.com (but not on Github, for example).   Ordered list  you appeared for an instant to be in two places at once. We have a saboteur aboard. you appeared for an instant to be in two places at once.   Unordered list  Quisque sem ipsum, placerat nec tortor vel, blandit vestibulum libero. Morbi sollicitudin viverra justo Blandit vestibulum libero. Morbi sollicitudin viverra justo Placerat nec tortor vel, blandit vestibulum libero. Morbi sollicitudin viverra justo   Code and Syntax Highlighting : var s = \u0026#34;JavaScript syntax highlighting\u0026#34;; const plukDeop = key =\u0026gt; obj =\u0026gt; key.split const compose = key =\u0026gt; obj =\u0026gt; key.split alert(s); var s = \u0026#34;JavaScript syntax highlighting\u0026#34;; const plukDeop = key =\u0026gt; obj =\u0026gt; key.split const compose = key =\u0026gt; obj =\u0026gt; key.split alert(s);  Buttons Button  Quote  “Did you come here for something in particular or just general Riker-bashing? And blowing into maximum warp speed, you appeared for an instant to be in two places at once.”\n  Notice : This is a simple note.\n This is a simple tip.\n This is a simple info.\n This is a simple warning.\n  Tab :  Title goes here Did you come here for something in particular or just general Riker-bashing? And blowing into maximum warp speed, you appeared for an instant to be in two places at once. We have a saboteur aboard. We know you’re dealing in stolen ore. But I wanna talk about the assassination attempt on Lieutenant Worf.  Title goes here Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.  Title goes here Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\nLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo     Table :    # First Last Handle     1 Row:1 Cell:1 Row:1 Cell:2 Row:1 Cell:3   2 Row:2 Cell:1 Row:2 Cell:2 Row:2 Cell:3   3 Row:3 Cell:1 Row:3 Cell:2 Row:3 Cell:3     Collapse : collapse 1    Lorem ipsum dolor sit amet consectetur adipisicing elit. Lorem ipsum dolor sit amet consectetur adipisicing elit. Lorem ipsum dolor sit amet consectetur    collapse 2    Lorem ipsum dolor sit amet consectetur adipisicing elit. Lorem ipsum dolor sit amet consectetur adipisicing elit. Lorem ipsum dolor sit amet consectetur    collapse 3    Lorem ipsum dolor sit amet consectetur adipisicing elit. Lorem ipsum dolor sit amet consectetur adipisicing elit. Lorem ipsum dolor sit amet consectetur     Image  Gallery               Youtube :   ","date":"1年1月1日","image":null,"permalink":"/elements/","title":"Elements"},{"categories":null,"contents":"","date":"1年1月1日","image":null,"permalink":"/404/","title":"No Search Found"},{"categories":null,"contents":"Responsibility of Contributors Lorem ipsum dolor sit amet, consectetur adipiscing elit. Purus, donec nunc eros, ullamcorper id feugiat quisque aliquam sagittis. Sem turpis sed viverra massa gravida pharetra. Non dui dolor potenti eu dignissim fusce. Ultrices amet, in curabitur a arcu a lectus morbi id. Iaculis erat sagittis in tortor cursus. Molestie urna eu tortor, erat scelerisque eget. Nunc hendrerit sed interdum lacus. Lorem quis viverra sed\npretium, aliquam sit. Praesent elementum magna amet, tincidunt eros, nibh in leo. Malesuada purus, lacus, at aliquam suspendisse tempus. Quis tempus amet, velit nascetur sollicitudin. At sollicitudin eget amet in. Eu velit nascetur sollicitudin erhdfvssfvrgss eget viverra nec elementum. Lacus, facilisis tristique lectus in.\nGathering of Personal Information Lorem ipsum dolor sit amet, consectetur adipiscing elit. Purus, donec nunc eros, ullamcorper id feugiat quisque aliquam sagittis. Sem turpis sed viverra massa gravida pharetra. Non dui dolor potenti eu dignissim fusce. Ultrices amet, in curabitur a arcu a lectus morbi id. Iaculis erat sagittis in tortor cursus. Molestie urna eu tortor, erat scelerisque eget. Nunc hendrerit sed interdum lacus. Lorem quis viverra sed\nProtection of Personal- Information Lorem ipsum dolor sit amet, consectetur adipiscing elit. Purus, donec nunc eros, ullamcorper id feugiat quisque aliquam sagittis. Sem turpis sed viverra massa gravida pharetra. Non dui dolor potenti eu dignissim fusce. Ultrices amet, in curabitur a arcu a lectus morbi id. Iaculis erat sagittis in tortor cursus.\nMolestie urna eu tortor, erat scelerisque eget. Nunc hendrerit sed interdum lacus. Lorem quis viverra sed Lorem ipsum dolor sit amet, consectetur adipiscing elit. Purus, donec nunc eros, ullamcorper id feugiat\nPrivacy Policy Changes  Sll the Themefisher items are designed to be with the latest , We check all comments that threaten or harm the reputation of any person or organization personal information including, but limited to, email addresses, telephone numbers Any Update come in The technology Customer will get automatic Notification.  ","date":"1年1月1日","image":null,"permalink":"/privacy-policy/","title":"Our Privacy Policy"},{"categories":null,"contents":"Responsibility of Contributors Lorem ipsum dolor sit amet, consectetur adipiscing elit. Purus, donec nunc eros, ullamcorper id feugiat quisque aliquam sagittis. Sem turpis sed viverra massa gravida pharetra. Non dui dolor potenti eu dignissim fusce. Ultrices amet, in curabitur a arcu a lectus morbi id. Iaculis erat sagittis in tortor cursus. Molestie urna eu tortor, erat scelerisque eget. Nunc hendrerit sed interdum lacus. Lorem quis viverra sed\npretium, aliquam sit. Praesent elementum magna amet, tincidunt eros, nibh in leo. Malesuada purus, lacus, at aliquam suspendisse tempus. Quis tempus amet, velit nascetur sollicitudin. At sollicitudin eget amet in. Eu velit nascetur sollicitudin erhdfvssfvrgss eget viverra nec elementum. Lacus, facilisis tristique lectus in.\nGathering of Personal Information Lorem ipsum dolor sit amet, consectetur adipiscing elit. Purus, donec nunc eros, ullamcorper id feugiat quisque aliquam sagittis. Sem turpis sed viverra massa gravida pharetra. Non dui dolor potenti eu dignissim fusce. Ultrices amet, in curabitur a arcu a lectus morbi id. Iaculis erat sagittis in tortor cursus. Molestie urna eu tortor, erat scelerisque eget. Nunc hendrerit sed interdum lacus. Lorem quis viverra sed\nProtection of Personal- Information Lorem ipsum dolor sit amet, consectetur adipiscing elit. Purus, donec nunc eros, ullamcorper id feugiat quisque aliquam sagittis. Sem turpis sed viverra massa gravida pharetra. Non dui dolor potenti eu dignissim fusce. Ultrices amet, in curabitur a arcu a lectus morbi id. Iaculis erat sagittis in tortor cursus.\nMolestie urna eu tortor, erat scelerisque eget. Nunc hendrerit sed interdum lacus. Lorem quis viverra sed Lorem ipsum dolor sit amet, consectetur adipiscing elit. Purus, donec nunc eros, ullamcorper id feugiat\nPrivacy Policy Changes  Sll the Themefisher items are designed to be with the latest , We check all comments that threaten or harm the reputation of any person or organization personal information including, but limited to, email addresses, telephone numbers Any Update come in The technology Customer will get automatic Notification.  ","date":"1年1月1日","image":null,"permalink":"/terms-conditions/","title":"Our Terms And Conditions"},{"categories":null,"contents":"","date":"1年1月1日","image":null,"permalink":"/search/","title":"Search Results"},{"categories":null,"contents":"","date":"1年1月1日","image":null,"permalink":"/homepage/full-left/","title":"Tulips"},{"categories":null,"contents":"","date":"1年1月1日","image":null,"permalink":"/homepage/full-right/","title":"Tulips"},{"categories":null,"contents":"","date":"1年1月1日","image":null,"permalink":"/homepage/full/","title":"Tulips"},{"categories":null,"contents":"","date":"1年1月1日","image":null,"permalink":"/homepage/grid-left/","title":"Tulips"},{"categories":null,"contents":"","date":"1年1月1日","image":null,"permalink":"/homepage/grid-right/","title":"Tulips"},{"categories":null,"contents":"","date":"1年1月1日","image":null,"permalink":"/homepage/grid/","title":"Tulips"},{"categories":null,"contents":"","date":"1年1月1日","image":null,"permalink":"/homepage/list-left/","title":"Tulips"},{"categories":null,"contents":"","date":"1年1月1日","image":null,"permalink":"/homepage/list-right/","title":"Tulips"},{"categories":null,"contents":"","date":"1年1月1日","image":null,"permalink":"/homepage/list/","title":"Tulips"},{"categories":null,"contents":"你可以问我任何问题 或者只是打个招呼, 不想填写表单吗，你也可以通过下方的链接发送邮件\n","date":"1年1月1日","image":null,"permalink":"/contact/","title":"你可以在这里联系到我 ：）"},{"categories":null,"contents":"Gather ye rosebuds where ye may.\n  Life is a series of natural and spontaneous changes. Don’t resist them – that only create sorrow. Let reality changes be reality. Let things flow naturally way they like.\n-Tulips    My Skills \u0026amp; Experiences:  1 2 3  ","date":"1年1月1日","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cimg loading=\"lazy\" decoding=\"async\" src=\"/images/author-full_hu89b7b068817a518c27453f8bc6fb846a_213454_650x0_resize_q90_h2_box.webp\" alt=\"\" class=\"img-fluid\" width=\"650\" height=\"\" onerror=\"this.onerror='null';this.src='\\/images\\/author-full_hu89b7b068817a518c27453f8bc6fb846a_213454_650x0_resize_q90_box.jpg'\"\u003e\n \n \n \n\n","permalink":"/about/","title":"你好，我是郁金香啊"},{"categories":null,"contents":"Gather ye rosebuds while ye may~\n","date":"1年1月1日","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cimg loading=\"lazy\" decoding=\"async\" src=\"/images/author_hua3f03d514eef6e6af938f795778aff4d_1183262_650x0_resize_q90_h2_box_3.webp\" alt=\"\" class=\"img-fluid\" width=\"650\" height=\"\" onerror=\"this.onerror='null';this.src='\\/images\\/author_hua3f03d514eef6e6af938f795778aff4d_1183262_650x0_resize_box_3.png'\"\u003e\n \n \n \n\n","permalink":"/author/tulips/","title":"郁金香啊"}]